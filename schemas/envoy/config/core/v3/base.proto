syntax = "proto3";

package envoy.config.core.v3;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/config/core/v3;corev3";

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

import "validate/validate.proto";

// option java_package = "io.envoyproxy.envoy.config.core.v3";
// option java_outer_classname = "BaseProto";
// option java_multiple_files = true;
// option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Common types]

// Envoy supports :ref:`upstream priority routing
// <arch_overview_http_routing_priority>` both at the route and the virtual
// cluster level. The current priority implementation uses different connection
// pool and circuit breaking settings for each priority level. This means that
// even for HTTP/2 requests, two physical connections will be used to an
// upstream host. In the future Envoy will likely support true HTTP/2 priority
// over a single upstream connection.
enum RoutingPriority {
  DEFAULT = 0;
  HIGH = 1;
}

// HTTP request method.
enum RequestMethod {
  METHOD_UNSPECIFIED = 0;
  GET = 1;
  HEAD = 2;
  POST = 3;
  PUT = 4;
  DELETE = 5;
  CONNECT = 6;
  OPTIONS = 7;
  TRACE = 8;
  PATCH = 9;
}

// Header name/value pair.
message HeaderValue {
  // option (udpa.annotations.versioning).previous_message_type = "envoy.api.v2.core.HeaderValue";

  // Header name.
  string key = 1 [(validate.rules).string = {
    min_len: 1 max_bytes: 16384 well_known_regex: HTTP_HEADER_NAME strict: false
  }];

  // Header value.
  //
  // The same :ref:`format specifier <config_access_log_format>` as used for
  // :ref:`HTTP access logging <config_access_log>` applies here, however
  // unknown header values are replaced with the empty string instead of `-`.
  string value = 2 [(validate.rules).string = {
    max_bytes: 16384 well_known_regex: HTTP_HEADER_VALUE strict: false
  }];
  
}

// Header name/value pair plus option to control append behavior.
message HeaderValueOption {
  // option (udpa.annotations.versioning).previous_message_type =
  //     "envoy.api.v2.core.HeaderValueOption";

  // Describes the supported actions types for header append action.
  enum HeaderAppendAction {
    // This action will append the specified value to the existing values if the header
    // already exists. If the header doesn't exist then this will add the header with
    // specified key and value.
    APPEND_IF_EXISTS_OR_ADD = 0;

    // This action will add the header if it doesn't already exist. If the header
    // already exists then this will be a no-op.
    ADD_IF_ABSENT = 1;

    // This action will overwrite the specified value by discarding any existing values if
    // the header already exists. If the header doesn't exist then this will add the header
    // with specified key and value.
    OVERWRITE_IF_EXISTS_OR_ADD = 2;
  }

  // Header name/value pair that this option applies to.
  HeaderValue header = 1 [(validate.rules).message = {required: true}];

  // Should the value be appended? If true (default), the value is appended to
  // existing values. Otherwise it replaces any existing values.
  google.protobuf.BoolValue append = 2;

  // [#not-implemented-hide:] Describes the action taken to append/overwrite the given value for an existing header
  // or to only add this header if it's absent. Value defaults to :ref:`APPEND_IF_EXISTS_OR_ADD<envoy_v3_api_enum_value_config.core.v3.HeaderValueOption.HeaderAppendAction.APPEND_IF_EXISTS_OR_ADD>`.
  HeaderAppendAction append_action = 3 [(validate.rules).enum = {defined_only: true}];
}

// Wrapper for a set of headers.
message HeaderMap {
  // option (udpa.annotations.versioning).previous_message_type = "envoy.api.v2.core.HeaderMap";

  repeated HeaderValue headers = 1;
}
